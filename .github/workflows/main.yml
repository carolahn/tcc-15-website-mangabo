name: React Testing and Deploying

on:
  push:
    branches: [ feat/release ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Installing dependencies
        run: |
          cd website
          npm install

      - name: Running Test
        run: |
          cd website
          npm test

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Determine If Version Changed
        id: version_changed
        run: |
          current_version=$(cat website/package.json | jq -r '.version')
          last_commit_version=$(git log -1 --pretty=%B | grep -oP "bump version to v[0-9]+\.[0-9]+\.[0-9]+" || true)
          echo "::set-output name=version_changed::$(test "$current_version" != "$last_commit_version" && echo "true" || echo "false")"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Change working directory
        run: cd website

      - name: Install Dependencies
        run: |
          cd website
          npm install

      - name: Build
        run: |
          cd website
          npm run build

      - name: Create Release
        if: steps.version_changed.outputs.version_changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: website/build/*  # Ajuste conforme necessário para o diretório correto dos artefatos de construção
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ steps.version_changed.outputs.current_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        

  deploy:
    name: Deploying
    needs: [test]
    runs-on: ubuntu-20.04
    env:
        EC2_HOST_DNS: ${{ secrets.EC2_HOST_DNS }}
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
    steps:
      - name: Install docker on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DNS }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY_PEM }}
          script: |
              sudo su
              sudo apt-get update
              yes | sudo apt-get install docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
              sudo usermod -aG docker ubuntu
              exec bash
      - name: Install docker-compose on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DNS }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY_PEM }}
          script: |
              sudo su
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              docker-compose --version
      - name: Deploying Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DNS }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY_PEM }}
          script: |
              sudo su
              docker stop website nginx
              docker rm website nginx
              docker rmi tcc-15-website-mangabo-nginx tcc-15-website-mangabo-website
              rm -rf tcc-15-website-mangabo
              git clone https://github.com/carolahn/tcc-15-website-mangabo.git
              cd tcc-15-website-mangabo
              rm -rf /website/build/*
              docker-compose -f docker-compose.prod.yml up --build -d